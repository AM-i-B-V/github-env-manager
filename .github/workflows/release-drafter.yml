name: Release Drafter

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  update_release_draft:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.actor != 'github-actions[bot]' && !contains(github.event.head_commit.message, '[skip ci]') && !startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Make version script executable
        run: chmod +x scripts/version.sh

      - name: Analyze commits and bump version
        id: version-bump
        run: |
          # Analyze commit messages to determine if version bump is needed
          COMMIT_MSG="${{ github.event.head_commit.message }}"

          if [[ "$COMMIT_MSG" == *"BREAKING CHANGE"* ]] || [[ "$COMMIT_MSG" == *"!:"* ]]; then
            BUMP_TYPE="major"
          elif [[ "$COMMIT_MSG" == feat:* ]] || [[ "$COMMIT_MSG" == *"feat:"* ]]; then
            BUMP_TYPE="minor"
          elif [[ "$COMMIT_MSG" == fix:* ]] || [[ "$COMMIT_MSG" == *"fix:"* ]]; then
            BUMP_TYPE="patch"
          else
            BUMP_TYPE="minor"  # Default to minor
          fi

          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "Bump type: $BUMP_TYPE"

          # Get current version
          CURRENT_VERSION=$(./scripts/version.sh version 2>/dev/null | grep "Current version:" | cut -d' ' -f3 || echo "0.0.0")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          # Calculate next version
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          case $BUMP_TYPE in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
          esac

          NEXT_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "Next version: $NEXT_VERSION"

      - name: Create version tag
        if: steps.version-bump.outputs.next_version != ''
        run: |
          NEXT_VERSION="${{ steps.version-bump.outputs.next_version }}"

          # Check if tag already exists
          if git rev-parse "v$NEXT_VERSION" >/dev/null 2>&1; then
            echo "Tag v$NEXT_VERSION already exists, skipping"
            exit 0
          fi

          # Create and push tag
          echo "Creating tag v$NEXT_VERSION..."
          git tag "v$NEXT_VERSION"
          git push origin "v$NEXT_VERSION"

      - name: Release Drafter
        id: release_drafter
        uses: release-drafter/release-drafter@v5
        with:
          name: Release ${{ steps.release_drafter.outputs.version }}
          tag: v${{ steps.release_drafter.outputs.version }}
          publish: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
